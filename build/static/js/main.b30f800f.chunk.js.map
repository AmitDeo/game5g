{"version":3,"sources":["hoc/Aux/Aux.js","shared/utility.js","store/actions/actionTypes.js","App.module.scss","hoc/Layout/Layout.module.scss","hoc/Layout/Layout.js","App.js","serviceWorker.js","store/reducers/quizBuilder.js","index.js"],"names":["aux","props","children","updateObject","oldObject","updatedProperties","addClassElement","element","name","className","split","indexOf","minsecFormat","seconds","string","pad","length","mins","Math","floor","Array","join","slice","minsecTextFormat","TOGGLE_ADVANCED","START_GAME","GET_QUESTION","FETCH_QUESTIONS_START","FETCH_QUESTIONS_SUCCESS","FETCH_QUESTIONS_FAIL","INCREMENT_TICKER","INCREMENT_ATTEMPT","SET_INTERVAL_OBJ","CLEAR_INTERVAL_OBJ","RESTART_GAME","FINISH_GAME","DRAG_CARD","INCREMENT_ADV_ATTEMPT","UPDATE_SWIPE_OBJECT","CELEBRATED_ON","module","exports","Layout","Aux","classes","BacktoTbl","href","alt","LandingScreen","React","lazy","InstructionScreen","QuizScreen","ResultScreen","GCardScreen","App","routes","path","exact","render","to","fallback","Loading","Boolean","window","location","hostname","match","initialState","questions","loading","completed","currentQuestion","error","starttime","endtime","attempts","missed","isGameStarted","isGameOver","isAdvanced","isLastQuestion","lastDraggedCard","isDragging","correctAnswers","swipeState","left","originalOffset","velocity","timeOfLastDragEvent","touchStartX","prevTouchX","beingTouched","height","intervalId","startFetchingQuestions","state","action","successFetchingQuestions","errorFetchingQuestions","getQuestion","currQ","id","questionLen","isLast","incrementTicker","ticker","incrementAttempt","isAnswered","userAnswer","checkIsGameOver","answer","incrementAdvAttempt","isAdvAnswered","userAdvAnswer","is_correct","celebrateOn","isCelebrated","startGame","date","Date","getTime","toogleAdvanced","setIntervalObj","intervalObj","obj","clearIntervalObj","clearInterval","finishGame","map","mainQsn","advanced_options","restartGame","dragCard","updateSwipe","swipeObj","allAnswered","reduce","acc","reducer","type","actionTypes","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","quizBuilder","quizBuilderReducer","store","createStore","applyMiddleware","thunk","app","basename","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b30f800f.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","export const updateObject = (oldObject, updatedProperties) => {\n\treturn {\n\t\t...oldObject,\n\t\t...updatedProperties\n\t};\n};\n\nexport const addClassElement = (element, name) => {\n  const arr\t= element.className.split(\" \");\n  if (arr.indexOf(name) === -1) {\n    element.className += \" \" + name;\n  }\n}\n\nfunction str_pad_left(string,pad,length) {\n    return (new Array(length+1).join(pad)+string).slice(-length);\n}\n\nexport const minsecFormat = (seconds) => {\n\tvar mins = Math.floor(seconds/60);\n\tvar seconds = seconds - mins*60;\n\n\treturn mins + ' : ' + str_pad_left(seconds,'0',2);\n}\n\n\nexport const minsecTextFormat = (seconds) => {\n\tvar mins = Math.floor(seconds/60);\n\tvar seconds = seconds - mins*60;\n\tvar minsText = mins > 0 \n\t\t\t\t  ? mins > 1 ? mins + ' minutes ' : mins + ' minute '\n\t\t\t\t  : '';\n\n\treturn minsText + seconds + ' seconds';\n}\n","export const CHECK_ANSWER = 'CHECK_ANSWER'\nexport const TOGGLE_ADVANCED = 'TOGGLE_ADVANCED'\nexport const START_GAME = 'START_GAME'\nexport const GET_QUESTION = 'GET_QUESTION'\nexport const FETCH_QUESTIONS = 'FETCH_QUESTIONS'\nexport const FETCH_QUESTIONS_START = 'FETCH_QUESTIONS_START'\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS'\nexport const FETCH_QUESTIONS_FAIL = 'FETCH_QUESTIONS_FAIL'\nexport const INCREMENT_TICKER = 'INCREMENT_TICKER'\nexport const INCREMENT_ATTEMPT = 'INCREMENT_ATTEMPT'\nexport const SET_INTERVAL_OBJ = 'SET_INTERVAL_OBJ'\nexport const CLEAR_INTERVAL_OBJ = 'CLEAR_INTERVAL_OBJ'\nexport const RESTART_GAME = 'RESTART_GAME'\nexport const FINISH_GAME = 'FINISH_GAME'\nexport const DRAG_CARD = 'DRAG_CARD'\nexport const INCREMENT_ADV_ATTEMPT = 'INCREMENT_ADV_ATTEMPT'\nexport const UPDATE_SWIPE_OBJECT = 'UPDATE_SWIPE_OBJECT'\nexport const CELEBRATED_ON = 'CELEBRATED_ON'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"Loading\":\"App_Loading__1vx9j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BacktoTbl\":\"Layout_BacktoTbl__3Ocxx\"};","import React from 'react';\n\nimport Aux from '../Aux/Aux';\nimport classes from './Layout.module.scss';\n\nconst Layout = props => {\n\t\n\treturn (\n\t\t\t<Aux>\n\t\t\t\t<div className={classes.BacktoTbl}>\n\t\t\t\t\t<a href=\"/\" alt=\"BacktoTbl\">&laquo; Back to Thinkabit Lab</a>\n\t\t\t\t</div> \n\t\t\t\t{props.children}\n\t\t\t</Aux>\n\t);\t\n}\n\nexport default Layout;","import React, { Suspense } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport classes from './App.module.scss';\nimport Layout from './hoc/Layout/Layout'\n\nconst LandingScreen = React.lazy(() => {\n  return import(\"./containers/LandingScreen/LandingScreen\");\n});\n\nconst InstructionScreen = React.lazy(() => {\n  return import(\"./containers/Instructions/Instructions\");\n});\n\n\nconst QuizScreen = React.lazy(() => {\n  return import(\"./containers/QuizBuilder/QuizBuilder\");\n});\n\n\nconst ResultScreen = React.lazy(() => {\n  return import(\"./containers/ResultScreen/ResultScreen\");\n});\n\nconst GCardScreen = React.lazy(() => {\n  return import(\"./components/GCards/GCards\");\n});\n\n\nconst App = (props) => {\n  \n  let routes = (\n      <Switch>\n            <Route path=\"/cards\" exact render={(props) => <GCardScreen {...props} /> } />\n            <Route path=\"/cards/:id\" exact render={(props) => <GCardScreen {...props} /> } />\n            <Route path=\"/result\" exact render={(props) => <ResultScreen {...props} /> } />\n            <Route path=\"/quiz\" exact render={(props) => <QuizScreen {...props} /> } />\n            <Route path=\"/instructions\" exact render={(props) => <InstructionScreen {...props} /> } />\n            <Route path=\"/\" exact render={(props) => <LandingScreen {...props} /> } />\n            <Redirect to=\"/\" />\n      </Switch>\n  );\n\n  return (\n      <div>\n        <Layout>\n          <Suspense fallback={<div className={classes.Loading}><span></span></div>}>{routes}</Suspense>\n        </Layout>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../../shared/utility';\n\n\nconst initialState = {\n\tquestions: [],\n\tloading: false,\n\tcompleted: false,\n\tcurrentQuestion: 0,\n\terror: null,\n\tstarttime: null,\n\tendtime: null,\n\tattempts: 0,\n\tmissed: 0,\n\tisGameStarted: false,\n\tisGameOver: false,\n\tisAdvanced: true,\n\tisLastQuestion: false,\n\tlastDraggedCard: null,\n\tisDragging: false,\n\tcorrectAnswers: 0,\n\tswipeState: {\n\t      left: 0,\n\t      originalOffset: 0,\n\t      velocity: 0,\n\t      timeOfLastDragEvent: 0,\n\t      touchStartX: 0,\n\t      prevTouchX: 0,\n\t      beingTouched: false,\n\t      height: 0,\n\t      intervalId: null\n\t}\n};\n\nconst startFetchingQuestions = (state, action) => {\n\treturn updateObject(state, {loading: true});\n}\n\nconst successFetchingQuestions = (state, action) => {\n\treturn updateObject(state, {\n\t\tquestions: action.questions,\n\t\tloading: false,\n\t\tcompleted: true,\n\t\tcurrentQuestion: 0,\n\t\tcurrentQuestion: 0,\n\t\terror: null,\n\t\tstarttime: null,\n\t\tendtime: null,\n\t\tattempts: 0,\n\t\tmissed: 0,\n\t\tisGameStarted: false,\n\t\tisGameOver: false,\n\t\tisAdvanced: true,\n\t\tisLastQuestion: false,\n\t\tlastDraggedCard: null,\n\t\tisDragging: false,\n\t\tcorrectAnswers: 0\n\t});\n}\n\n\nconst errorFetchingQuestions = (state, action) => {\n\treturn updateObject(state, {\n\t\tloading: false,\n\t\tcompleted: false,\n\t\tquestions: [],\n\t\terror: action.error\n\t});\n}\n\nconst getQuestion = (state, action) => {\n\n\tlet currQ = action.id;\n\tconst questionLen = state.questions.length ;\n\tlet isLast = false;\n\n\tif(currQ >= (questionLen - 1))\n\t{\n\t\tcurrQ = (questionLen - 1);\n\t\tisLast = true;\n\t}\n\telse if ( currQ <= 0)\n\t{\n\t\tcurrQ = 0\n\t}\n\t\n\treturn updateObject(state, {currentQuestion: currQ, isLastQuestion: isLast });\n\n}\n\nconst incrementTicker = (state, action) => {\n\treturn updateObject(state, {ticker: state.ticker + 1});\n}\n\nconst incrementAttempt = (state, action) => {\n\tstate.questions[action.currentQuestion].isAnswered = true;\n\tstate.questions[action.currentQuestion].userAnswer = action.userAnswer;\n\t\n\tstate = checkIsGameOver(state);\n\treturn updateObject(state, \n\t\t\t{\n\t\t\t\tattempts: state.attempts + 1, \n\t\t\t\tmissed: state.missed + action.missed, \n\t\t\t\tcorrectAnswers: state.correctAnswers \n\t\t\t\t\t+ \n\t\t\t\t\tstate.questions[action.currentQuestion].userAnswer ===  state.questions[action.currentQuestion].answer\n\t\t\t\t\t? 1\n\t\t\t\t\t: 0\n\t\t\t}\n\t);\n}\n\nconst incrementAdvAttempt = (state, action) => {\n\tstate.questions[action.currentQuestion].isAdvAnswered = true;\n\tstate.questions[action.currentQuestion].userAdvAnswer = action.userAnswer;\n\t\n\tstate = checkIsGameOver(state);\n\n\treturn updateObject(state, \n\t\t\t{\n\t\t\t\tattempts: state.attempts + 1, \n\t\t\t\tmissed: state.missed + action.missed, \n\t\t\t\tcorrectAnswers: state.correctAnswers + action.is_correct ? 1 : 0\n\t\t\t}\n\t);\n}\n\n\nconst celebrateOn = (state, action) => {\n\tstate.questions[action.currentQuestion].isCelebrated = true;\n\treturn state;\n}\n\nconst startGame = (state, action) => {\n\tvar date = new Date();\n\treturn updateObject(state, {isGameStarted: true, starttime: date.getTime(), endtime: null });\n}\n\nconst toogleAdvanced = (state, action) => {\n\treturn updateObject(state, {isAdvanced: !state.isAdvanced});\n}\n\nconst setIntervalObj = (state, action) => {\n\treturn updateObject(state, {intervalObj: action.obj});\n}\n\nconst clearIntervalObj = (state, action) => {\n\tclearInterval(state.intervalObj);\n\treturn updateObject(state, {intervalObj: null});\n}\n\n\nconst finishGame = (state, action) => {\n\n\t//Calculate total points\n\tvar missed = 0;\n\tstate.questions.map((mainQsn) => {\n\t\t\n\t\tif(mainQsn.answer !== mainQsn.userAnswer)\n\t\t{\n\t\t\tmissed += 1;\n\t\t}\n\n\t\tif(state.isAdvanced){\n\n\t\t\tmissed += mainQsn.userAdvAnswer !== null && +mainQsn.advanced_options[mainQsn.userAdvAnswer].is_correct === 1 ? 0 : 1;\n\t\t}\n\n\t\treturn null;\n\t});\n\n\tvar date = new Date();\n\n\treturn updateObject(state, {\n\t\tquestions: [],\n\t\tloading: false,\n\t\tcompleted: true,\n\t\tcurrentQuestion: 0,\n\t\terror: null,\n\t\tisGameStarted: false,\n\t\tisGameOver: false,\n\t\tintervalObj: null,\n\t\tisLastQuestion: false,\n\t\tattempts: 0,\n\t\tmissed: missed,\n\t\tendtime: date.getTime() \n\t});\n}\n\n\nconst restartGame = (state, action) => {\n\n\treturn updateObject(state, {\n\t\tintervalObj: null,\n\t\tquestions: [],\n\t\tloading: false,\n\t\tcompleted: false,\n\t\tcurrentQuestion: 0,\n\t\terror: null,\n\t\tisGameStarted: false,\n\t\tisGameOver: false,\n\t\tticker: 0,\n\t\tisLastQuestion: false,\n\t\tattempts: 0,\n\t\tmissed: 0,\n\t\tisAdvanced: true,\n\t\tstarttime: null,\n\t\tendtime: null\n\t});\n}\n\nconst dragCard = (state, action) => {\n\treturn updateObject(state, {\n\t\tlastDraggedCard: action.lastDraggedCard,\n\t\tisDragging: action.isDragging\n\t});\n}\n\n\nconst updateSwipe = (state, action) => {\n\treturn updateObject(state, {\n\t\tswipeState: {...action.swipeObj}\n\t});\n}\n\nconst checkIsGameOver = (state) => {\n\n\tif(state.isAdvanced && state.attempts >= 11)\n\t{\n\t\treturn updateObject(state, {\n\t\t\tisGameOver: true\n\t\t});\t\n\t}\n\n\tif(!state.isAdvanced && state.attempts >= 6)\n\t{\n\t\treturn updateObject(state, {\n\t\t\tisGameOver: true\n\t\t});\t\n\t}\n\t\n\n\tconst allAnswered = state.questions.reduce((acc , mainQsn) => {\n\t\t\t\t\t\t\tacc = state.isAdvanced ?\n\t\t\t\t\t\t\t\t\tacc && ((mainQsn.userAnswer !== null) && (mainQsn.userAdvAnswer !== null))\n\t\t\t\t\t\t\t\t\t: acc && (mainQsn.userAnswer !== null);\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t}, true);\n\treturn updateObject(state, {\n\t\tisGameOver: allAnswered\n\t});\t\t\t\t\t\t\t\n};\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase actionTypes.FETCH_QUESTIONS_START: return startFetchingQuestions(state, action);\n\t\tcase actionTypes.FETCH_QUESTIONS_SUCCESS: return successFetchingQuestions(state, action);\n\t\tcase actionTypes.FETCH_QUESTIONS_FAIL: return errorFetchingQuestions(state, action);\n\t\tcase actionTypes.INCREMENT_TICKER: return incrementTicker(state, action);\n\t\tcase actionTypes.INCREMENT_ATTEMPT: return incrementAttempt(state, action);\n\t\tcase actionTypes.CELEBRATED_ON: return celebrateOn(state, action);\n\t\tcase actionTypes.INCREMENT_ADV_ATTEMPT: return incrementAdvAttempt(state, action);\n\t\tcase actionTypes.GET_QUESTION: return getQuestion(state, action);\n\t\tcase actionTypes.START_GAME: return startGame(state, action);\n\t\tcase actionTypes.TOGGLE_ADVANCED: return toogleAdvanced(state, action);\n\t\tcase actionTypes.GET_QUESTION: return getQuestion(state, action);\n\t\tcase actionTypes.SET_INTERVAL_OBJ: return setIntervalObj(state, action);\n\t\tcase actionTypes.CLEAR_INTERVAL_OBJ: return clearIntervalObj(state, action);\n\t\tcase actionTypes.FINISH_GAME: return finishGame(state, action);\n\t\tcase actionTypes.RESTART_GAME: return restartGame(state, action);\n\t\tcase actionTypes.DRAG_CARD: return dragCard(state, action);\n\t\tcase actionTypes.UPDATE_SWIPE_OBJECT: return updateSwipe(state, action);\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport 'babel-polyfill';\n\nimport './assets/fonts/fonts.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport quizBuilderReducer from './store/reducers/quizBuilder';\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n\tquizBuilder: quizBuilderReducer\n});\n\nconst store = createStore(rootReducer, composeEnhancers(\n\tapplyMiddleware(thunk)\n\t)\n);\n\n\nconst app = (\n\t\t<Provider store={store}>\n\t\t\t<BrowserRouter basename=\"/think-you-know-wireless-play-the-5g-game/\">\n\t\t\t\t<App />\n\t\t\t</BrowserRouter>\n\t\t</Provider>\n\t);\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}